<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://aadikuchlous.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://aadikuchlous.github.io/" rel="alternate" type="text/html" /><updated>2022-01-04T11:59:54+05:30</updated><id>https://aadikuchlous.github.io/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Recurrent Neural Networks in Tensorflow II</title><link href="https://aadikuchlous.github.io/jekyll/tensorflow/neuralnetworks/2022/01/04/recurrent-neural-networks-in-tensorflow-ii.html" rel="alternate" type="text/html" title="Recurrent Neural Networks in Tensorflow II" /><published>2022-01-04T11:28:34+05:30</published><updated>2022-01-04T11:28:34+05:30</updated><id>https://aadikuchlous.github.io/jekyll/tensorflow/neuralnetworks/2022/01/04/recurrent-neural-networks-in-tensorflow-ii</id><content type="html" xml:base="https://aadikuchlous.github.io/jekyll/tensorflow/neuralnetworks/2022/01/04/recurrent-neural-networks-in-tensorflow-ii.html">&lt;p&gt;This is the second in a series of posts about recurrent neural networks in Tensorflow. The first post lives &lt;a href=&quot;https://r2rt.com/recurrent-neural-networks-in-tensorflow-i.html&quot;&gt;here&lt;/a&gt;. In this post, we will build upon our vanilla RNN by learning how to use Tensorflow’s scan and dynamic_rnn models, upgrading the RNN cell and stacking multiple RNNs, and adding dropout and layer normalization. We will then use our upgraded RNN to generate some text, character by character.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note 3/14/2017:&lt;/strong&gt; This tutorial is quite a bit deprecated by changes to the TF api. Leaving it up since it may still be useful, and most changes to the API are cosmetic (biggest change is that many of the RNN cells and functions are in the tf.contrib.rnn module). There was also a change to the ptb_iterator. A (slightly modified) copy of the old version which should work until I update this tutorial is uploaded [here].&lt;/p&gt;

&lt;h3 id=&quot;recap-of-our-model&quot;&gt;Recap of our model&lt;/h3&gt;

&lt;p&gt;In the last post, we built a very simple, no frills RNN that was quickly able to learn to solve the toy task we created for it.&lt;/p&gt;

&lt;p&gt;Here is the formal statement of our model from last time:&lt;/p&gt;

&lt;p&gt;$S_t = \text{tanh}(W(X_t \ @ \ S_{t-1}) + b_s)$
$P_t = \text{softmax}(US_t + b_p)$&lt;/p&gt;

&lt;p&gt;where $@$ represents vector concatenation, $X_t \in R^n$ is an input vector, $W \in R^{d \times (n + d)}, \  b_s \in R^d, \ U \in R^{n \times d}$ is the size of the input and output vectors, and d is the size of the hidden state vector. At time step 0, $S_{-1}$ (the initial state) is initialized as a vector of zeros.&lt;/p&gt;

&lt;h3 id=&quot;task-and-data&quot;&gt;Task and data&lt;/h3&gt;

&lt;p&gt;This time around we will be building a character-level language model to generate character sequences, a la Andrej Karpathy’s &lt;a href=&quot;https://github.com/karpathy/char-rnn&quot;&gt;char-rnn&lt;/a&gt; (and see, e.g., a Tensorflow implementation by Sherjil Ozair &lt;a href=&quot;https://github.com/sherjilozair/char-rnn-tensorflow&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Why do something that’s already been done? Well, this is a much harder task than the toy model from last time. This model needs to handle long sequences and learn long time dependencies. That makes a great task for learning about adding features to our RNN, and seeing how our changes affect the results as we go.&lt;/p&gt;

&lt;p&gt;To start, let’s create our data generator. We’ll use the tiny-shakespeare corpus as our data, though we could use any plain text file. We’ll choose to use all of the characters in the text file as our vocabulary, treating lowercase and capital letters are separate characters. In practice, there may be some advantage to forcing the network to use similar representations for capital and lowercase letters by using the same one-hot representations for each, plus a binary flag to indicate whether or not the letter is a capital. Additionally, it is likely a good idea to restrict the vocabulary (i.e., the set of characters) used, by replacing uncommon characters with an UNK token (like a square: □).&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="tensorflow" /><category term="neuralNetworks" /><summary type="html">This is the second in a series of posts about recurrent neural networks in Tensorflow. The first post lives here. In this post, we will build upon our vanilla RNN by learning how to use Tensorflow’s scan and dynamic_rnn models, upgrading the RNN cell and stacking multiple RNNs, and adding dropout and layer normalization. We will then use our upgraded RNN to generate some text, character by character.</summary></entry><entry><title type="html">Testing The Possibilities</title><link href="https://aadikuchlous.github.io/jekyll/update/2021/12/28/testing-the-capabilities.html" rel="alternate" type="text/html" title="Testing The Possibilities" /><published>2021-12-28T11:28:34+05:30</published><updated>2021-12-28T11:28:34+05:30</updated><id>https://aadikuchlous.github.io/jekyll/update/2021/12/28/testing-the-capabilities</id><content type="html" xml:base="https://aadikuchlous.github.io/jekyll/update/2021/12/28/testing-the-capabilities.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;video preload=&quot;metadata&quot; controls=&quot;&quot;&gt;&lt;source src=&quot;/assets/test1.MP4&quot; /&gt;&lt;/video&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/test.gif&quot; alt=&quot;gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;$$ J_{fwd} = I(Z_{t+1}; Z_t, A_t) $$&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/test1.png&quot; alt=&quot;alt test&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;https://www.youtube.com/watch?v=Ptk_1Dc2iPY&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>